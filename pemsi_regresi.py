# -*- coding: utf-8 -*-
"""Pemsi Regresi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kKys8t85dwKlP959Ckrg1lPCaI_7s_FH
"""
import matplotlib.pyplot as plt
import numpy as np

def sigma(arr):
  sum = 0
  for el in arr:
    sum += el
  return sum

def powerMap(arr):
  powArr = []
  for el in arr:
    powArr.append(el**2)
  return powArr

def multiplyMap(arr1,arr2):
  mulArr = []
  for i in range(len(arr1)):
    mulArr.append(arr1[i]*arr2[i])
  return mulArr


def r(arrX, arrY):
  atas = len(arrX)*sigma(multiplyMap(arrX,arrY)) - sigma(arrX)*sigma(arrY)
  bawah = (len(arrX)*sigma(powerMap(arrX)) - sigma(arrX)**2)*(len(arrY)*sigma(powerMap(arrY)) - sigma(arrY)**2)
  return atas / bawah**0.5

def Regresi(arrX, arrY):
  atasA = sigma(arrY)*sigma(powerMap(arrX)) - sigma(arrX)*sigma(multiplyMap(arrX,arrY))
  bawahA = len(arrX)*sigma(powerMap(arrX)) - sigma(arrX)**2
  A = atasA / bawahA
  print('nilai dari konstanta a adalah: {} \nhasil dari {} / {}'.format(A,atasA,bawahA))

  atasB = len(arrX)*sigma(multiplyMap(arrX,arrY)) - (sigma(arrX)*sigma(arrY))
  bawahB = len(arrX)*sigma(powerMap(arrX)) - sigma(arrX)**2
  B = atasB / bawahB
  print("nilai dari koefisien b adalah: {} \nhasil dari {} / {}".format(B , atasB, bawahB))

  return A,B

def skalaGuiliford(r):
  Guiliford = ""
  if(0 <= r < 0,2):
    Guiliford = "sangat Lemah"
  elif (0.2 <= r < 0.4):
    Guiliford = "Lemah"
  elif (0.4 <= r < 0.6):
    Guiliford = "Sedang"
  elif (0.6 <= r < 0.8):
    Guiliford = "Kuat"
  elif (0.8 <= r <= 1):
    Guiliford = "Sangat Kuat"

  return Guiliford

EXIT = "exit"

#arrX = [6,4,5,3,3]
#arrY = [17,33,16,30,11]
print("\n =============================== Simulasi Regresi ==============================")
XLabel = input("Masukan Label untuk Sumbu X: ")
YLabel = input("Masukan Label untuk Sumbu Y: ")
print("\n format untuk memasukan data x1,x2,x3,x4,....(cth: 1,2,3,4)")
arrX = input("Masukan Nilai-Nilai Variabel {} : ".format(XLabel))
arrX = list(map(float,arrX.split(',')))
arrY = input("Masukan Nilai-Nilai Variabel {} : ".format(YLabel))
arrY = list(map(float,arrY.split(',')))

A,B = Regresi(arrX,arrY)
fx = 'y = {} + {} X'.format(round(A,3),round(B,3))
print("\nmaka, "+fx)

r = r(arrX,arrY)


Jenis = "positif" if r >= 0 else "negatif"
Guiliford = skalaGuiliford(r)
persen = round(r,4)**2 * 100

print("\nbesar hubungan antara {} dan {} adalah {}".format(XLabel,YLabel,round(r,4)))
print("\ndimana Jenis hubungannya adalah {}".format(Jenis))
print("dan Kekuatan Hubungannya {}".format(Guiliford))
print("Besar Kontribusi dari variabel {} terhadap {} sebesar {}%".format(XLabel,YLabel,round(persen,4)))
print("sisanya {}% adalah kontribusi selain variabel {}\n".format(100 - persen , XLabel))

inX = []
predY = [] 
print("masukan nilai {} yang ingin di prediksi.".format(XLabel))
print("ketik 'exit' untuk menghentikan Program\n")
while (True):
  x = input("Jika {} = ".format(XLabel))
  if x == EXIT:
    break
  else:
    x = float(x)
    y = A + B * x
    inX.append(x)
    predY.append(y)

    print('maka nilai {} = {}'.format(YLabel,y))
    
    plt.title("Plot Regresi")
    plt.xlabel(XLabel)
    plt.ylabel(YLabel)
    plt.scatter(arrX,arrY,label = "data")
    plt.plot(arrX,A + B * np.array(arrX), label = fx)
    plt.scatter(inX,predY,label = "prediksi")
    plt.legend()
    plt.show()
    
    